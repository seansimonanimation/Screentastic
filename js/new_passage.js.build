//note to self: always do a whitespace runthrough when code is written. It'll save your sanity.
'use strict';


function Passage (id, name, tags, source) {
	//the numeric id of the passage. Super importante. Number, readonly.
	this.pasid = id;
	
	//the name of the passage. Not as important. String.
	this.name = name;

	//the tags of the passage. Not used by me personally, but eh. Array.
	this.tags = tags;
	
	//The passage's source code. Returns an array that later becomes a string during inital processing.
	this.text = {
		print: (function(){
			if (window.story.sketchMode === false){
				return this._pdfProduction(_.unescape(source));
			} else {
				return this._pdfSketch(_.unescape(source));
			}
		})(),
		browser : (function(){		
			if (window.story.sketchMode === false){
				return this._sketchMachine(_.unescape(source));
			} else {
				return this._productionMachine(_.unescape(source));
			}
		})()
	};
	//a storage place for knowing if text exists in the passage
	this.textExists = false;

	//a storage place for knowing if links exist
	this.linkExists = false;

	//a storage place for the page height, for knowing if we need to add pages.
	this.pageHeight = 0;

}


_.extend(Passage.prototype, {

	//Helper functions are here. Technically all part of _.extend(Passage.prototype, { which is on line 27 at this time.
	/*
	 A helper function that is connected to passage templates as $. It acts like the jQuery $ function, running a script when the passage is ready in the DOM. The function passed is also bound to div#page for convenience. If this is *not* passed a single function, then this acts as a passthrough to jQuery's native $ function. @method _readyFunc @return jQuery object, as with jQuery() @private
	*/
	_formatMachine: function(original){
		var lineRegExp =/(\w{3}>>(.*)(\r\n|\n)?|\[\[(.*?)\]\](\r\n|\n)?)/g; //both the link grabber and the text grabber combined!
		var sourceMatches = original.match(lineRegExp); //returns an array of all line matches where the lines begin with itm>> or are links.
		var i;
		this.textExists = false;
		try {
			this.textExists = true;
			for (i=0; i < sourceMatches.length; i++) {
				var lineType = sourceMatches[i].substring(0,3);
				var lineContent = sourceMatches[i].substring(5);
				if (lineType == "if>" || lineType ==  ">>>" || lineType ==  "eli" || lineType ==  "els") {
					continue; //We'll let conditional statements pass through... for now.
					/*TODO: Conditional statement format: 
							if>>> condition
							itm>>item
							itm>> item
							>>>>> (end conditional statement)

							if>>> condition
							itm>>item
							itm>> item
							els>> (blank, else statement)
							itm>> item
							itm>> item
							>>>>> (end conditional statement)

							Else If support: (infinte else ifs)
							if>>> condition
							itm>>item
							itm>> item
							elif> other condition
							itm>> item
							itm>> item
							elif> other condition
							itm>> item
							itm>> item
							>>>>> (end conditional statement, else optional.)
					It basically rejiggers the whole thing into a Javascript if statement,
					then brings the whole chunk into one array element.		
					*/
				} else if (lineType == "act" || lineType == "sch" || lineType == "tra") {
					lineContent = this.pageParser(lineType, lineContent, 62);
				} else if (lineType == "dia"){
					lineContent = this.pageParser(lineType, lineContent, 33);
				} else if (lineType == "cha") {
					lineContent = this.pageParser(lineType, lineContent, 26);	
				} else if (lineType == "par") { //Auto-adds parenthases as necessary.
					var matches = lineContent.match(/\s?(\()?([^)]*)(\))?$/); 
					if (matches.length == 1) {
						lineContent = "(" + lineContent + ")";
					} else if (matches.length == 2) {
						if (matches[0] == "(") {
							lineContent =  lineContent + ")";
						} else {
							lineContent = "(" + lineContent;
						}
					}
					lineContent = this.pageParser(lineContent, 26);
				} else if (lineType.substring(0,2) == "[[") {
					//link
					lineType = "link";
					this.linksExist = true;
				}
				if (lineType == "act" || lineType == "sch" || lineType == "tra" || lineType == "dia" || lineType == "cha" || lineType == "par"){
					if (sourceMatches[i].substring(0,2) == ")(") {
						original = original.replace(sourceMatches[i], lineContent.substring(2) + "</div>");
					} else if (lineType == "link") {
					original = original.replace(sourceMatches[i], this._linkMachine(sourceMatches[i]));					
					} else {
						original = original.replace(sourceMatches[i], '<div id=\"' + lineType + 'Cont\">' + lineContent + "</div>");
					}
				}
			}
		} catch(err) {
			this.textExists = false;
			this.linksExist = false;
			console.log(err);
		}
		if (this.linksExist === false && this.textExists === false) {	
			original = '<center><h1>(This passage has no data or has some other unrecoverable error. Check the Javascript console for your error.)</h1></center>'; //lazy error catching, yay! Also lazy HTML! Yay! 
		}
		var holepunch = '<div id="holePunch"><h1 class="tophole">m</h1><h1 class="midhole">m</h1><h1 class="bothole">m</h1></div>';


 //holepunches only need to be in production mode.
		return holepunch + original;

	},
	_sketchMachine: function(original) {
		if (original.slice(0,8) == "sketch>>" ) {
			original = original.slice(8);
		}
//		console.log(original);
		window.derp = original;
		var lineRegExp =/(.+(\r\n|\n)?|\[\[(.*?)\]\](\r\n|\n)?)/g;
		var sourceMatches = original.match(lineRegExp); //returns an array of all lines.
//		console.log(sourceMatches);
		var i;
		try {
			this.textExists = true;
			for (i=0; i < sourceMatches.length; i++) {
				if (sourceMatches[i].substring(0,2) == "[["){
					//console.log(sourceMatches[i]);
					sourceMatches[i] = "</ul>" + this._linkMachine(sourceMatches[i]) + "<ul>";
					sourceMatches[i] = this._pageParser("sketch",sourceMatches[i],65);
					//console.log(sourceMatches[i]);

				} else if (sourceMatches[i].match(/\w/) === null){ //if there's no non-whitespace characters, kill it, let .join() sort it out.
					delete sourceMatches[i];
				} else {
					//console.log(sourceMatches[i]);
					sourceMatches[i] = this._pageParser("sketch",sourceMatches[i],60);
					if (sourceMatches[i].substring(0,5) == "</ul>"){
						sourceMatches[i] = sourceMatches[i] + "</li>";
					} else {
						sourceMatches[i] = '<li>' + sourceMatches[i] + "</li>";
					}
				}

				//console.log(this.pageHeight.toString() + sourceMatches[i]);
			}
		} catch(err) {
			console.log("derped!");
			this.textExists = false;
		}
		//console.log(sourceMatches);
		return "<ul>" + sourceMatches.join("") + "</ul>";
	},

	_linkMachine: function(original) { 	//insert code for links!
		var linkHunter = /\[\[(.*?)\]\]((\r\n|\n)*)/;
		var liMat = original.match(linkHunter)[1]; //returns a string of "display|target"
		var finishedLink;
		//[[links]]... Snowman's link code made no goddamn sense... so I rewrote it. HAHA! (notes... add the newline possibility to the regex.)
		try {
			this.linksExist = true;
			var display = liMat.slice(0, liMat.indexOf('|')); //second index to bar
			var target = liMat.slice(liMat.indexOf('|') + 1); //bar to last.
			if (/^\w+:\/\/\/?\w/i.test(target)) {
				finishedLink = '<div id="linkCont"><a href="' + target + '">' + display + '</a>' + '</div>';
			} else {
				finishedLink = '<div id="linkCont"><a href="javascript:void(0)" data-passage="' + _.escape(target) + '">' + _.escape(display) + '</a>' + '</div>';
			}
			
		} catch(err) {
			this.linksExist = false;
		}
		return finishedLink;
	},


	_pageParser: function(t, c, w) { //t=type, c=content, w=width 
		//This function automatically figures out how many pages that a passage uses and generates pages accordingly.
		var npAtFront = false;
		var result = '';
		//console.log(c.length);

		if (t == "cha" || t== "act" ||t == "sch" || t == "tra" || t == "link" || t == "sketch") {
			this.pageHeight++;
			if (this.pageHeight >=90){
				npAtFront = true;
			} else {
				npAtFront = false;
			}
		}
		if (npAtFront === true) {
			this.pageHeight = 0;
		}
		var i = 0;
		var s = 0; //s is a dummy iterator, so we can build the array as needed without being limited to c(ontent).length
		var lineArr = []; //an array holding each line.
		for (i=0; i<c.length;i+=w) {
			if (i===0){
				lineArr[s] = c.substring(0,w);
			} else {
				lineArr[s] = c.substring(i,w+i);
			}
			//console.log(c);
			s++;
			this.pageHeight++;
			//console.log(this.pageHeight);
			
			if (this.pageHeight>=90) {
				if (window.story.sketchMode === false){
					lineArr[s] = "</div><div id=\"moreCont\">[MORE]</div></div><br /><div id=\"page\" style=\"position:relative;left:-100px;top:100px;\"><div id=\"holePunch\"><h1 class=\"tophole\">m</h1><h1 class=\"midhole\">m</h1><h1 class=\"bothole\">m</h1></div><div id=\"" + t +"\">";
				} else {
					console.log(t);
					lineArr[s] = "</div><br /><div id=\"page\" style=\"position:relative;left:-100px;top:100px;\"><li>" + t;
				}
				s++;
				this.pageHeight = 0;
			}
		}
		if (npAtFront === true) {
			if (window.story.sketchMode === false) {
				return ")(<div id=\"page\" style=\"position:relative;left:-73px;top:83px;\"><div id=\"holePunch\"><h1 class=\"tophole\">m</h1><h1 class=\"midhole\">m</h1><h1 class=\"bothole\">m</h1></div><div id=\"" + t + "\">" + lineArr.join(""); //The )( is so we can easily tell it later.
			} else {
				return "</ul><div id=\"page\" style=\"position:relative;left:-73px;top:83px;\"><div id=\"" + t + "\"><ul><li>" + lineArr.join("");
			}
		} else {
			return lineArr.join("");
		}


//Let's save this old, bad chunk of code for now.
		/*	*****KNOWN ISSUE*****
			The page parser can really only guess at what the final result will be, and it seems to find an arbitrary place
			to put the pagemaking code each time. I need to figure out an exact way for the parser to guess accurately.
			Until then, it works, just the distances between the pages and here the pages actually split seem arbitrary to the
			end user.
		*\///remove backslash to uncomment


		var tempPassage = document.getElementById("passageConstruction");
		tempPassage.innerHTML = ""; //Element needs to be cleared out before we can begin.
		var tempHeight = 0;
		var heightRegEx = /.*(\r\n|\n)?/g;
		var wordRegEx = /
		var itemArr = original.match(heightRegEx);
		var heightSubtractor = 0;
		var pageCounter = 1;
		var result = '';
		var pageDistance = [];
		var newstring = '';
		var changePageArr = [];
		var firstPart = '';
		var breakoff = '';
		var secondPart = '';
		var pageChangeArr = [];
		var pageBreak = '';
		//We need to build the "#passageConstruction" div character by character (used to be line by line), test the height, and add pages based on that height. To do that, we need to make the tempPassage workable. AKA not display: hidden;
		tempPassage.style.position = "absolute";
		tempPassage.style.visibility = "hidden";
		tempPassage.style.display = "block";
		tempPassage.style.width = "672px";
		tempPassage.style.left = "0px";
		tempPassage.style.top = "0px";
		for (i=0; i<itemArr.length; i++) {//now combine 
			




			//let's not do things by individual characters... haha ha ha...




			for (s=0; s<itemArr[i].length; s++) {
				newstring = newstring + itemArr[i][s];
				$("#passageConstruction").html(newstring);				
				tempHeight = tempPassage.clientHeight;
				if (tempHeight > 900) {
					pageDistance = 972 - tempHeight + 82;
					if (window.sketchMode === false ) {
						//instead of breaking our flow, let's make a new object now and inject everything later.
						//What we're doing is inserting the page break at the beginning of the word.
						pageBreak = "</div><br /><div id=\"page\" style=\"position:relative;left:-73px;top:" + pageDistance + "px;\"><div id=\"holePunch\"><h1 class=\"tophole\">m</h1><h1 class=\"midhole\">m</h1><h1 class=\"bothole\">m</h1></div>\n";
						pageChangeArr[pageCounter-1] = { index: i, text: pageBreak + itemArr[i]};
						tempPassage.innerHTML = "";
						newstring = "";
						pageCounter = pageCounter + 1;
					} else {
						pageBreak = "</ul></div><br /><div id=\"page\"style=\"position:relative;left:-73px;top:" + pageDistance + "px;\"><ul>\n";
						pageChangeArr[pageCounter-1] = { index: i, text: pageBreak + itemArr[i]};
					}
				}
			}
		}
		for (i=0; i<pageChangeArr.length; i++) {
			itemArr[pageChangeArr[i].index] = pageChangeArr[i].text;
		}
		i=0;
		for (i=0; i<itemArr.length; i++) {
			result = result + itemArr[i];		
		} 
		tempPassage.style.visibility = "hidden";
		tempPassage.style.display = "none";
		$(window).scrollTop(0); //it seems to work better here than anywhere else... go figure.
		return result;*/
	}//,
	//_ifMachine: function(ifCond, elseIfCond: '', elseIfStart: 0, elseIfEnd: 0, totalArray, ifStart, ifEnd, elseStart: 0, elseEnd: 0) { //Am I seriously creating an if-then? Fuck. TODO:Also, figure out the format here...

	
	//} 

});


